/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/app.js":
/*!***********************!*\
  !*** ./src/js/app.js ***!
  \***********************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\nclass Countdown{\n    constructor(selector, options){\n        const defaultOptions = {\n            timeEnd: 'Mar 16 2025 18:20:40', // when the countdown ends\n            format: 'day/hours/minutes/seconds', //  year month day hours minutes seconds\n            nameTime: [ 'Днів', 'Години', 'Хвилини', 'Секунд'], // name\n            startCount: 'http://worldtimeapi.org/api/timezone/Etc/UTC', // settings: \"local\" (machine time) or get the time from \"http://worldtimeapi.org/api/timezone/Etc/UTC\"\n            timeZone: 2, // time zone, work only if you use the time from the site\n            hiddenBefoStart: false, // hide timer before load\n        }\n        this.options = Object.assign(defaultOptions, options);\n        this.$selector = document.querySelectorAll(selector);\n        this.#renderHtml();\n        this.refreshIntervalId = null; // link for setInterval\n        this.getTime().then((timeNow) => {\n            this.coundDown(timeNow);\n        });\n    }\n    #renderHtml() {\n        const getFormat = this.options.format.split(\"/\");\n        let html = '';\n        getFormat.forEach((el) => {\n            let nameTime = '';\n            switch (el) {\n                case 'day': nameTime = this.options.nameTime[0];\n                    break;\n                case 'hours': nameTime = this.options.nameTime[1];\n                    break;\n                case 'minutes': nameTime = this.options.nameTime[2];\n                    break;\n                case 'seconds': nameTime = this.options.nameTime[3];\n                    break;\n                default: console.error(`No search ${el}`);\n                    break;\n            }\n            html = html + `<div class='block-time ${el} '> <div class='wr-time'><div class='time'>00</div><div class='name-time'>${nameTime}</div></div></div>`;\n        })\n        this.$selector.forEach((elm) => {\n            (this.options.hiddenBefoStart == true) && (elm.style.opacity = 0);\n            elm.insertAdjacentHTML(\"afterbegin\", html);\n        });\n    }\n    async  getTime(){\n        if (this.options.startCount.trim()  != \"local\"){\n            const response = await fetch(this.options.startCount);\n            const timeNow = await response.json();\n            return timeNow\n        } else{\n            return new Date();\n        }\n    }\n    coundDown(timeNow){\n        const getNow = (this.options.startCount.trim() != \"local\") ? new Date(timeNow.datetime.split(\".\")[0]).getTime() + (this.options.timeZone * 60 * 60 * 1000)  :  new Date(timeNow).getTime();\n        const getEnd = new Date(this.options.timeEnd).getTime();\n        let timeLeft = getEnd - getNow;\n        this.refreshIntervalId = setInterval(() => {\n            timeLeft = timeLeft - 1000;\n            if (timeLeft < 0){\n                clearInterval(this.refreshIntervalId);\n                (typeof this.timerFinishedCallback == 'function') && (this.timerFinishedCallback())  // call the function when the timer has reached the end\n                this.$selector.forEach(el => (this.options.hiddenBefoStart == true) && (el.style.opacity = 1)); // show the countdown if it is hidden\n                return false;\n            }\n            const seconds = Math.floor(timeLeft / 1000);\n            const minutes = Math.floor(seconds / 60);\n            const hours = Math.floor(minutes / 60);\n            const days = Math.floor(hours / 24);\n            let remainingDays = days;\n                (remainingDays < 10) && (remainingDays = '0' + remainingDays);\n            let remainingHours = hours % 24;\n                (remainingHours < 10) && (remainingHours = '0' + remainingHours);\n            let remainingMinutes = minutes % 60;\n                (remainingMinutes < 10) && (remainingMinutes = '0' + remainingMinutes);\n            let remainingSeconds = seconds % 60;\n                (remainingSeconds < 10) && (remainingSeconds = '0' + remainingSeconds);\n            this.$selector.forEach((el) => {\n                (this.options.hiddenBefoStart == true) && (el.style.opacity = 1);\n                (el.querySelector('.seconds .time') != null) && (el.querySelector('.seconds .time').innerHTML = remainingSeconds); // add seconds\n                (el.querySelector('.minutes .time') != null) && (el.querySelector('.minutes .time').innerHTML = remainingMinutes); // add seconds\n                (el.querySelector('.hours .time') != null) && (el.querySelector('.hours .time').innerHTML = remainingHours); // add seconds\n                (el.querySelector('.day .time') != null) && (el.querySelector('.day .time').innerHTML = remainingDays); // add seconds\n            });\n            (typeof this.importDateIntroAnotherClass == 'function') && (this.importDateIntroAnotherClass(remainingSeconds, remainingMinutes, remainingHours, remainingDays));\n        }, 1000);\n    }\n    // Events to call from outside\n    destroy(){\n        clearInterval(this.refreshIntervalId); // clear setInterval in function coundDown\n        this.$selector.forEach(el => {\n            el.classList.remove('hasSvg');\n            el.innerHTML = \"\";\n        });\n    }\n    timerFinished(callback) {\n        this.timerFinishedCallback = callback; // встановлюємо колбек, який буде викликаний, коли таймер досягне нуля\n    }\n}\nclass CountdownMobuleSvgCircle extends Countdown {\n    constructor(selector, options){\n        super(selector, options);\n        const defaultOptions = {\n            svgParameters: {\n                visible: false,\n                clockwise: false, // the direction of movement of the arrow is clockwise\n                strokeLinecap: true, // border radius for circle\n                transitionAnimation: 500, //  animation in milisecond\n                smoothTransition: false,// Smooth transition from zero 59 to 0\n                strokeColor: ['rgba(0,0,0, 0.1', 'rgba(255,0,0, 0.9'], // first color for background, second color for porgress circle,\n                sizeSvg: { width: [194, 200], stroke: [1, 10] }, // the first parameter is the background circle, the second parameter is the progress circle\n                dayStart: 1000, // the day from which the countdown should start, if there is such a parameter\n                mediaWidth: [\n                    { size: 992, sizeSvg: { width: [120, 120], stroke: [4, 4] } },\n                    { size: 720, sizeSvg: { width: [100, 100], stroke: [2, 2] } },\n                    { size: 480, sizeSvg: { width: [70, 70], stroke: [2, 2] } }\n                ]\n            },\n        }\n        this.options = Object.assign(this.options, defaultOptions, options); \n        this.getTime().then((timeNow) => {\n            (typeof this.addSvgCircle == 'function') && (this.addSvgCircle());\n        });\n    }\n    coundDown(timeNow) {\n        super.coundDown(timeNow); // Call the parent's Countdown method\n        this.importDateIntroAnotherClass = (remainingSeconds, remainingMinutes, remainingHours, remainingDays) => {\n            this.#svgProgressTime({ remainingSeconds, remainingMinutes, remainingHours, remainingDays })\n        }\n    }\n    #rendersvg(nametime) {\n        return `<svg class=\"progres-svg-plagin\"><circle class=\"background-ring\" stroke=\"${this.options.svgParameters.strokeColor[0]}\"  fill=\"transparent\"  /> <circle style=\"transform-origin: 50% 50%; transform: rotate(-90deg); stroke-linecap: ${(this.options.svgParameters.strokeLinecap == true) && 'round'}  ; transition: stroke-dashoffset ${this.options.svgParameters.transitionAnimation}ms;\" class=\"progres-ring progress-${nametime}\" stroke=\"${this.options.svgParameters.strokeColor[1]}\"  fill=\"transparent\"  /></svg>`;\n    }\n    #parametersSvg() {\n        // ring circle\n        let getMediaWidth = this.options.svgParameters.sizeSvg;\n        const getSizeWindow = window.innerWidth;\n        for (let i = 0; i < this.options.svgParameters.mediaWidth.length; i++) {\n            if (getSizeWindow <= this.options.svgParameters.mediaWidth[i].size) {\n                getMediaWidth = this.options.svgParameters.mediaWidth[i].sizeSvg;\n            } else {\n                break;\n            }\n        }\n        const widthMax = Math.max(...getMediaWidth.width),\n            widthSvg = (indexWidth) => getMediaWidth.width[indexWidth],\n            cx_cy = widthMax / 2,\n            width_stroke = (indexStroke) => getMediaWidth.stroke[indexStroke],\n            radius = (indexWidth, indexStroke) => (widthSvg(indexWidth) / 2) - (width_stroke(indexStroke) / 2);\n        const general_attributes = {\n            'cx': cx_cy,\n            'cy': cx_cy\n        }\n        const attributesBackgroundAdd = {\n            'r': radius(0, 0),\n            'stroke-width': width_stroke(0)\n        }\n        const attributesProgressAdd = {\n            'r': radius(1, 1),\n            'stroke-width': width_stroke(1)\n        }\n        const attributesBackground = { ...general_attributes, ...attributesBackgroundAdd };\n        const attributesProgress = { ...general_attributes, ...attributesProgressAdd };\n        // add parameters in progres-svg-plagin\n        document.querySelectorAll('.progres-svg-plagin').forEach((el) => {\n            el.setAttribute('width', widthMax);\n            el.setAttribute('height', widthMax);\n            for (let key in attributesBackground) {\n                el.querySelector('.background-ring').setAttribute(key, attributesBackground[key]);\n            }\n            for (let key in attributesProgress) {\n                el.querySelector('.progres-ring').setAttribute(key, attributesProgress[key]);\n            }\n        });\n    }\n    #svgProgressTime(time) {\n        let second = parseInt(time.remainingSeconds);\n        const percentSecond = (this.options.svgParameters.clockwise == true) ? 100 - second / 60 * 100 : second / 60 * 100;\n        let minute = parseInt(time.remainingMinutes);\n        const percentMinute = (this.options.svgParameters.clockwise == true) ? 100 - minute / 60 * 100 : minute / 60 * 100;\n        let hours = parseInt(time.remainingHours);\n        const percentHours = (this.options.svgParameters.clockwise == true) ? 100 - hours / 60 * 100 : hours / 60 * 100;\n        const day = this.options.svgParameters.dayStart;\n        const percentDay = time.remainingDays / day * 100;\n        document.querySelectorAll('.progres-svg-plagin .progres-ring').forEach((el) => {\n            if (el.classList.contains('progress-seconds') == true) this.#percentForProgress(el, percentSecond);\n            if (el.classList.contains('progress-minutes') == true) this.#percentForProgress(el, percentMinute);\n            if (el.classList.contains('progress-hours') == true) this.#percentForProgress(el, percentHours);\n            if (el.classList.contains('progress-day') == true) this.#percentForProgress(el, percentDay);\n        });\n    }\n    #percentForProgress(el, percent) {\n        const radius = el.r.baseVal.value\n        const circumference = 2 * Math.PI * radius;\n        el.style.strokeDasharray = circumference;\n        const offset = circumference - percent / 100 * circumference;\n        el.style.strokeDashoffset = offset;\n        // smoothTransitionFromZero59To0\n        (this.options.svgParameters.smoothTransition == false) && ((percent == 0 || percent == 100) ? el.style.transition = ' stroke-dashoffset 0ms' : el.style.transition = `stroke-dashoffset ${this.options.svgParameters.transitionAnimation}ms`);\n    }\n    addSvgCircle(){\n        this.$selector.forEach((el) =>{\n            el.classList.add('hasSvg');\n            el.querySelectorAll('.block-time').forEach((e) => {\n                e.insertAdjacentHTML(\"afterbegin\", this.#rendersvg(e.className.split(' ')[1]));\n            });\n        });\n        this.#parametersSvg();\n        window.addEventListener('resize', () => {\n            this.#parametersSvg();\n        });\n    }\n}\n// new Countdown('.countDonw');\nlet callCountDonw = new CountdownMobuleSvgCircle('.countDonw', {});\n\n\n// evetn destroy adn add plagin\ndocument.querySelector('.destroy').addEventListener('click', () => {\n    callCountDonw.destroy();\n});\ndocument.querySelector('.runSvg').addEventListener('click', () => {\n    callCountDonw.destroy();\n    callCountDonw = new CountdownMobuleSvgCircle('.countDonw', {});\n});\ndocument.querySelector('.runSimple').addEventListener('click', () => {\n    callCountDonw.destroy();\n    callCountDonw = new Countdown('.countDonw', {});\n});\n\n//# sourceURL=webpack://gulp-project/./src/js/app.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/js/app.js"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ })()
;